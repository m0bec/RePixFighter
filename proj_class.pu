@startuml{image html RePixFighter_class.png}

class DataKeeper{
    int score
    int player_hp
    int player_bomb
    int time
    int stage_num
}

enum Stage{
    One
}
Stage -- DataKeeper
Stage -- BaseScrollMap

package Player{
    class Player{
        void Invincible()
        void OperationInvalid()
    }

    class Shot{
        float damage
        float GiveDamage()
    }
    Player --> Shot

    class Hit{
        void OnTriggerEnter()
        void DeathAnim()
    }
    Player -- Hit
    Hit -- DataKeeper

    class Move{
        void Operation()
        void MoveRange()
    }
    Player -- Move

    class Bomb{
        float Invicible_time
        void Execution()
    }
    Player -- Bomb
    Bomb -- DataKeeper

    class StartMove{
        void Execution()
        float invalid_control_time
    }
    Player -- StartMove
}

package Enemy{
    class BaseEnemy{
        float hp
        float score
        int move_type
        int shot_type
        int stage
        int game_status
        bool stop_flag
        void OnTriggerEnter()
        void Death()
        void Move()
        void Shot()
    }
    BaseEnemy -- DataKeeper
    BaseEnemy -- EnemyMoveController
    BaseEnemy -- EnemyBulletController

    class EnemyMoveController{
        Vector3 EnemyMove(int movr_num_)
    }

    class EnemyBulletController{
        void Shot(int shot_type_)
        void BulletMove(int shot_type_)
    }

    enum EnemyMoveType{

    }

    class Tank{
        void ScrollMove()
    }
    BaseEnemy <|-- Tank

    class PlaneG{

    }
    BaseEnemy <|-- PlaneG

}

class CreateEnemy{
    float time
    void Create()
    void TimeMeasure()
}
CreateEnemy --> BaseEnemy
CreateEnemy --> BaseScrollMap

class ScrollSpeed{
    One
}
class BaseScrollMap{
    void Scroll()
    void ReMove()
}
BaseScrollMap --> Tank
BaseScrollMap -- DataKeeper
BaseScrollMap -- ScrollSpeed

class DisplayWriter{
    void WriteScore()
    void WriteBomb()
    void WriteScore()
    void WriteHp()
    void WriteDisp()
}
DisplayWriter -- DataKeeper

class MenueDisp{
    void StopGame()
    void ExitGame()
    void Continue()
}
MenueDisp -- DataKeeper

class GameStatusController{
    void GameOver()
    void GameClear()
}
GameStatusController -- DataKeeper

class StopGameTime{
    bool stop_flag
}
StopGameTime -- MenueDisp
StopGameTime --> BaseEnemy
StopGameTime --> Player
StopGameTime --> CreateEnemy

@enduml